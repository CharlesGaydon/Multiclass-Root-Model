name: CICD

on:
  # Run CICD for non-draft pull request
  pull_request:
    branches:
      - dev
      - main
  # Also run when the pull request merges (which generates a push)
  # So that we can tag the docker image appropriately.
  push:
    branches:
      - dev
      - prod
      - main

jobs:
  CICD:
    runs-on: self-hosted

    steps:

    - name: Checkout branch
      uses: actions/checkout@v2

    - name: Build docker image
      run: docker build -t lidar_deep_im .

    - name: Check code neatness (linter)
      run: docker run lidar_deep_im flake8

    - name: Fast unit tests first
      run: >
        docker run 
        lidar_deep_im
        python -m
        pytest -rA -v -m "not slow" 
        --ignore=actions-runner
        --ignore="notebooks"

    - name: Slow unit tests last, using large files stored in self-hosted action-runner.
      run: >
        docker run
        -v /var/data/CICD_github_assets/nebulia_B2V0.5:/lidar/tests/files/large
        lidar_deep_im
        python -m
        pytest -rA -v -m "slow" 
        --ignore=actions-runner
        --ignore="notebooks"

    - name: Full module run on LAS subset
      run: docker run -v /var/data/CICD_github_assets:/CICD_github_assets lidar_deep_im 

    # Everything ran so we tag the valid docker image to keep it
    # This happens for push events, which are in particular 
    # triggered when a pull request is merged.
    - name: Get the branch name into an environment variable.
      if: github.event_name == 'push'
      uses: nelonoel/branch-name@v1.0.1

    - name: Print the branch name
      if: github.event_name == 'push'
      run: echo ${BRANCH_NAME}

    - name: Tag the docker image with branch name
      if: github.event_name == 'push'
      run: docker tag lidar_deep_im:latest lidar_deep_im:${BRANCH_NAME}

    - name: Run the new, tagged image at least once so that is it not prunned by mistake when using docker system prune
      if: github.event_name == 'push'
      run: docker run lidar_deep_im:${BRANCH_NAME} bash

    # This needs writing rights to the mounted path
    - name: Save the docker image as lidar_deep_im_${BRANCH_NAME}.tar
      run: docker save lidar_deep_im:${BRANCH_NAME} -o /var/data/cicd/CICD_github_assets/CICD_docker_images/lidar_deep_im_${BRANCH_NAME}.tar

    - name: Clean dangling docker images
      if: always()  # always do it, even if something failed
      run: docker system prune --force # remove dangling docker images, without asking user for confirmation


      
