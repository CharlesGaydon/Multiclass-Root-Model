name: CICD

on:
  # Run CICD for non-draft pull request
  pull_request:
    branches:
      - main
  # Also run when the pull request merges (which generates a push)
  # So that we can tag the docker image appropriately.
  push:
    branches:
      - prod
      - main
      - nexus_push

jobs:
  CICD:
    runs-on: self-hosted

    steps:

    - name: Checkout branch
      uses: actions/checkout@v2

    - name: Build docker image
      run: docker build -t myria3d .

    - name: Fast unit tests first
      run: >
        docker run
        -v /var/data/cicd/CICD_github_assets/myria3d_B2V0.5/inputs/:/myria3d/tests/data/large/
        --ipc=host
        myria3d
        python -m
        pytest -rA -v -m "not slow"
        --ignore=actions-runner


    # Always run with --ipc=host and --shm-size=2gb (at least) to enable sufficient shared memory when predicting on large data
    # predict.subtile_overlap specifies overlap between adjacent samples (in meters).
    - name: Example inference run via Docker with inference-time subtiles overlap to smooth-out results.
      run: >
        docker run
        -v /var/data/cicd/CICD_github_assets/myria3d_B2V0.5/inputs/:/inputs/
        -v /var/data/cicd/CICD_github_assets/myria3d_B2V0.5/outputs/:/outputs/
        --ipc=host
        --shm-size=2gb
        myria3d
        python /myria3d/myria3d/predict.py
        experiment=predict
        predict.ckpt_path=/inputs/proto151_V0.0_epoch_056_Myria3DV2.3.0.ckpt
        predict.src_las=/inputs/792000_6272000_subset_buildings.las
        predict.output_dir=/outputs/
        predict.subtile_overlap=25
        datamodule.batch_size=20
        hydra.run.dir=/myria3d

    - name: Check code neatness (linter)
      run: docker run myria3d flake8

    # Everything ran so we tag the valid docker image to keep it
    # This happens for push events, which are in particular 
    # triggered when a pull request is merged.
    - name: Get the branch name into an environment variable.
      if: github.event_name == 'push'
      uses: nelonoel/branch-name@v1.0.1

    - name: Print the branch name
      if: github.event_name == 'push'
      run: echo ${BRANCH_NAME}

    - name: Tag the docker image with branch name
      if: github.event_name == 'push'
      run: docker tag myria3d:latest myria3d:${BRANCH_NAME}

    - name: Run the new, tagged image at least once so that is it not prunned by mistake when using docker system prune
      if: github.event_name == 'push'
      run: docker run myria3d:${BRANCH_NAME} bash

    # This needs writing rights to the mounted path
    # - name: Save the docker image as myria3d_${BRANCH_NAME}.tar
    #   if: github.event_name == 'push'
    #   run: docker save myria3d:${BRANCH_NAME} -o /var/data/cicd/CICD_github_assets/CICD_docker_images/myria3d_${BRANCH_NAME}.tar


    # get version number and date, to tag the image pushed to nexus
    - name: get version number
      if: github.event_name == 'push'
      id: tag
      run: |
        echo "::set-output name=version::$(docker run myria3d grep '__version__' package_metadata.yaml| cut -d\" -f2)"
        echo "::set-output name=date::$(date '+%Y.%m.%d')"

    # show possible tags, for debugging purpose
    - name: Print version
      if: github.event_name == 'push'
      run: |
        echo "${{steps.tag.outputs.version}}"
        echo "${{steps.tag.outputs.date}}"

    - name: push docker on nexus
      # if: ${{(((github.event_name == 'push') && (github.ref_name == 'main')) || ((github.event_name == 'pull_request') && (github.base_ref == 'main') && (github.event.review.state == 'approved')))}}  # we push on nexus only if a pull request on the main branch has been accepted
      run: |
        # docker tag myria3d 10.128.81.69:8082/lidar_hd/myria3d:${{steps.tag.outputs.version}}
        docker tag myria3d 10.128.81.69:8082/lidar_hd/myria3d:${{steps.tag.outputs.date}}
        docker login 10.128.81.69:8082 --username svc_lidarhd --password ${{ secrets.PASSWORD_SVC_LIDARHD }}
        docker push 10.128.81.69:8082/lidar_hd/myria3d:${{steps.tag.outputs.date}}

    - name: Clean dangling docker images
      if: always()  # always do it, even if something failed
      run: docker system prune --force # remove dangling docker images, without asking user for confirmation
